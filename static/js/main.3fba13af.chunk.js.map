{"version":3,"sources":["components/InputBar.js","components/WordCard.js","components/WordList.js","components/App.js","index.js"],"names":["InputBar","props","useState","word","setWord","onSubmit","event","preventDefault","toLocaleUpperCase","className","placeholder","onChange","e","target","value","onKeyPress","charCode","autoFocus","tabindex","onClick","handleStart","handleReset","WordCard","isStarted","handleRemove","displayRemove","inactive","key","Set","simScores","sort","map","sim","chooseWord","displaySims","WordList","list","content","index","ListGroup","Item","indexOf","inactiveContent","inactiveList","disabled","App","wordList","setWordList","inactiveWords","setInactiveWords","setSimScores","setIsStarted","show","setShow","handleClose","reset","useEffect","length","alert","checkLength","addToList","includes","checkForDuplicates","calcSim","scores","size","Array","i","j","setupSimMatrix","checkSimilarity","a","b","Input","startProgram","idx","matches","forEach","element","push","keep","filter","chuck","newlist","w","Modal","onHide","backdrop","keyboard","Header","Body","Footer","Button","ReactDOM","render","document","querySelector"],"mappings":"mMAwDeA,EAtDE,SAACC,GAAW,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KAGpBC,EAAW,SAACC,GAChBA,EAAMC,iBACNN,EAAMI,SAASF,EAAKK,qBACpBJ,EAAQ,KASV,OACE,yBAAKK,UAAU,gBACb,yBAAKA,UAAU,YACb,2BACEC,YAAY,eACZC,SAAU,SAACC,GAAD,OAAOR,EAAQQ,EAAEC,OAAOC,QAClCT,SAAU,kBAAMA,KAChBU,WAAY,SAACH,GAbL,IAACN,EACQ,MADRA,EAakBM,GAZvBI,UACRX,EAASC,IAYLW,WAAS,IAEX,yBAAKR,UAAU,gBACb,yBACEA,UAAU,6BACVS,SAAS,IACTC,QAASd,GAET,yBAAKI,UAAU,kBAAf,OACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,uBAGjB,yBAAKA,UAAU,2BAA2BU,QAASlB,EAAMmB,aACvD,yBAAKX,UAAU,kBAAf,SACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,uBAGjB,yBAAKA,UAAU,yBAAyBU,QAASlB,EAAMoB,aACrD,yBAAKZ,UAAU,kBAAf,SACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,uBCVZa,EAnCE,SAACrB,GA0BhB,OACE,yBAAKQ,UAAU,gBACZR,EAAME,KACLF,EAAMsB,UAAmC,KAdzB,SAACtB,GACrB,OACE,4BACEQ,UAAU,sCACVU,QAAS,kBAAMlB,EAAMuB,aAAavB,EAAME,QAExC,uBAAGM,UAAU,sBAQKgB,CAAcxB,GAChCA,EAAMyB,SAA2B,KA7BnB,WAClB,IAAIC,EAAM,EAEV,OADe,YAAI,IAAIC,IAAI3B,EAAM4B,YAAYC,OAC/BC,KAAI,SAACC,GACjB,GAAIA,GAAO,EACT,OACE,4BAAQL,IAAKA,IAAOR,QAAS,kBAAMlB,EAAMgC,WAAWhC,EAAME,KAAM6B,KAC7DA,MAsBYE,K,QCcVC,EA1CE,SAAClC,GAChB,OAAKA,EAAMmC,MAMXC,EAAUpC,EAAMmC,KAAKL,KAAI,SAAC5B,EAAMmC,GAC9B,OACE,kBAACC,EAAA,EAAUC,KAAX,CAAgBb,IAAKW,GACnB,kBAAC,EAAD,CACEA,MAAOrC,EAAMmC,KAAKK,QAAQtC,GAC1B8B,WAAYhC,EAAMgC,WAClB9B,KAAMA,EACN0B,UAAW5B,EAAM4B,UAAUS,GAC3Bd,aAAcvB,EAAMuB,aACpBD,UAAWtB,EAAMsB,gBAMzBmB,EAAkBzC,EAAM0C,aAAaZ,KAAI,SAAC5B,EAAMmC,GAC9C,OACE,kBAACC,EAAA,EAAUC,KAAX,CAAgBI,UAAQ,EAACjB,IAAKW,GAC5B,kBAAC,EAAD,CACEZ,UAAQ,EACRvB,KAAMA,EACN0B,UAAW5B,EAAM4B,UAAU5B,EAAMmC,KAAKK,QAAQtC,UAOpD,6BACE,6BAAMkC,GACN,6BAAMK,KAnCD,8BAGT,IAAIL,EAASK,G,gBC2LAG,EA9LH,WAAO,IAAD,EACgB3C,mBAAS,CACvC,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBAdc,mBACT4C,EADS,KACCC,EADD,OAgB0B7C,mBAAS,IAhBnC,mBAgBT8C,EAhBS,KAgBMC,EAhBN,OAiBkB/C,mBAAS,IAjB3B,mBAiBT2B,EAjBS,KAiBEqB,EAjBF,OAkBkBhD,oBAAS,GAlB3B,mBAkBTqB,EAlBS,KAkBE4B,EAlBF,OAmBQjD,oBAAS,GAnBjB,mBAmBTkD,EAnBS,KAmBHC,EAnBG,KAqBVC,EAAc,WAClBD,GAAQ,GACRE,KAIFC,qBAAU,WACgB,IAApBV,EAASW,QAAgBlC,GAHN8B,GAAQ,GAMP,IAApBP,EAASW,QAAgBlC,GAC3BmC,MAAM,yDAEP,CAACZ,EAAUvB,IAEd,IAIMoC,EAAc,SAACxD,GACnB,OAAO2C,EAAS,GAAGW,SAAWtD,EAAKsD,QAG/BG,EAAY,SAACzD,GACbA,EAAKsD,OAAS,EACZX,EAASW,OAAS,GAGhBE,EAAYxD,IAbK,SAACA,GAC1B,OAAQ2C,EAASe,SAAS1D,GAYG2D,CAAmB3D,GAF5C4C,EAAY,GAAD,mBAAKD,GAAL,CAAe3C,KAKxBuD,MACEC,EAAYxD,GACR,0BACA,6CAKVuD,MAAM,2BAgBJK,EAAU,SAAC3B,GAGf,IAFA,IAAI4B,EAbiB,SAAC5B,GAGtB,IAFA,IAAI6B,EAAO7B,EAAKqB,OACZO,EAAS,IAAIE,MAAMD,GACdE,EAAI,EAAGA,EAAIF,EAAME,IAAK,CAC7BH,EAAOG,GAAK,IAAID,MAAMD,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAMG,IACxBJ,EAAOG,GAAGC,IAAM,EAGpB,OAAOJ,EAIMK,CAAejC,GACxB6B,EAAOD,EAAOP,OACTU,EAAI,EAAGA,EAAIF,EAAME,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMG,IACpBD,IAAMC,IACRJ,EAAOG,GAAGC,GAAKJ,EAAOI,GAAGD,GAAKG,EAAgBlC,EAAK+B,GAAI/B,EAAKgC,KAIlE,OAAOJ,GASHM,EAAkB,SAACC,EAAGC,GAE1B,IADA,IAAIxC,EAAM,EACDmC,EAAI,EAAGA,EAAII,EAAEd,OAAQU,IACxBI,EAAEJ,KAAOK,EAAEL,IACbnC,IAGJ,OAAOA,GAiCHuB,EAAQ,WACZR,EAAY,IACZG,EAAa,IACbD,EAAiB,IACjBE,GAAa,IAGTsB,EAAQ,WACZ,OAAQlD,EAON,yBACEd,UAAU,2BACVS,SAAS,IACTC,QAAS,kBAAMoC,MAEf,yBAAK9C,UAAU,kBAAf,SACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,mBAbjB,kBAAC,EAAD,CACEJ,SAAU,SAACF,GAAD,OAAUyD,EAAUzD,IAC9BiB,YAAa,kBAzDE,SAACgB,GACpB,IAAI4B,EAASD,EAAQ3B,GACrBc,EAAac,GACbb,GAAa,GAsDUuB,CAAa5B,IAChCzB,YAAa,kBAAMkC,QAgBzB,OACE,yBAAK9C,UAAU,2CACb,kBAACgE,EAAD,CAAOhE,UAAU,iBACjB,kBAAC,EAAD,CACE2B,KAAMU,EACNb,WAxDa,SAAC9B,EAAM6B,GACxB,IAAI2C,EAAM7B,EAASL,QAAQtC,GAEvByE,EAAU,GAGd/C,EAAU8C,GAAKE,SAAQ,SAACC,EAASxC,GAC3BwC,IAAY9C,GACd4C,EAAQG,KAAKzC,MAGjB,IAAI0C,EAAOlC,EAASmC,QAAO,SAAC9E,EAAMmC,GAChC,OAAOsC,EAAQf,SAASvB,MAEtB4C,EAAQpC,EAASmC,QAAO,SAAC9E,GAC3B,OAAQ6E,EAAKnB,SAAS1D,MAExB4C,EAAYiC,GACZ/B,EAAiB,GAAD,mBAAKD,GAAL,YAAuBkC,KAEvChC,EAAaa,EAAQiB,KAqCjBrC,aAAcK,EACdnB,UAAWA,EACXL,aAlEa,SAACrB,GAClB,IAAIgF,EAAUrC,EAASmC,QAAO,SAACG,GAC7B,OAAOA,IAAMjF,KAEf4C,EAAYoC,IA+DR5D,UAAWA,IAEb,kBAAC8D,EAAA,EAAD,CACEjC,KAAMA,EACNkC,OAAQhC,EACRiC,SAAS,SACTC,UAAU,GAEV,kBAACH,EAAA,EAAMI,OAAP,uBACA,kBAACJ,EAAA,EAAMK,KAAP,KAAa5C,EAAS,IACtB,kBAACuC,EAAA,EAAMM,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQzE,QAASmC,GAAjB,a,MCxLVuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.3fba13af.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst InputBar = (props) => {\r\n  const [word, setWord] = useState(\"\");\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onSubmit(word.toLocaleUpperCase());\r\n    setWord(\"\");\r\n  };\r\n\r\n  const onKeyUp = (event) => {\r\n    if (event.charCode === 13) {\r\n      onSubmit(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui container\">\r\n      <div className=\"ui input\">\r\n        <input\r\n          placeholder=\"Enter a word\"\r\n          onChange={(e) => setWord(e.target.value)}\r\n          onSubmit={() => onSubmit()}\r\n          onKeyPress={(e) => onKeyUp(e)}\r\n          autoFocus\r\n        />\r\n        <div className=\"ui container\">\r\n          <div\r\n            className=\"ui animated primary button\"\r\n            tabindex=\"0\"\r\n            onClick={onSubmit}\r\n          >\r\n            <div className=\"hidden content\">Add</div>\r\n            <div className=\"visible content\">\r\n              <i className=\"plus circle icon\"></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"ui animated green button\" onClick={props.handleStart}>\r\n            <div className=\"hidden content\">Start</div>\r\n            <div className=\"visible content\">\r\n              <i className=\"play circle icon\"></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"ui animated red button\" onClick={props.handleReset}>\r\n            <div className=\"hidden content\">Reset</div>\r\n            <div className=\"visible content\">\r\n              <i className=\"recycle icon\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputBar;\r\n","import React from \"react\";\r\n\r\nconst WordCard = (props) => {\r\n  const displaySims = () => {\r\n    let key = 0;\r\n    const scores = [...new Set(props.simScores)].sort();\r\n    return scores.map((sim) => {\r\n      if (sim > -1) {\r\n        return (\r\n          <button key={key++} onClick={() => props.chooseWord(props.word, sim)}>\r\n            {sim}\r\n          </button>\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  const displayRemove = (props) => {\r\n    return (\r\n      <button\r\n        className=\"compact circular ui icon red button\"\r\n        onClick={() => props.handleRemove(props.word)}\r\n      >\r\n        <i className=\"small trash icon\"></i>\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui container\">\r\n      {props.word}\r\n      {!props.isStarted ? displayRemove(props) : null}\r\n      {!props.inactive ? displaySims() : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordCard;\r\n","import React from \"react\";\r\nimport WordCard from \"./WordCard\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nconst WordList = (props) => {\r\n  if (!props.list) {\r\n    return <div></div>;\r\n  }\r\n\r\n  let content, inactiveContent;\r\n\r\n  content = props.list.map((word, index) => {\r\n    return (\r\n      <ListGroup.Item key={index}>\r\n        <WordCard\r\n          index={props.list.indexOf(word)}\r\n          chooseWord={props.chooseWord}\r\n          word={word}\r\n          simScores={props.simScores[index]}\r\n          handleRemove={props.handleRemove}\r\n          isStarted={props.isStarted}\r\n        />\r\n      </ListGroup.Item>\r\n    );\r\n  });\r\n\r\n  inactiveContent = props.inactiveList.map((word, index) => {\r\n    return (\r\n      <ListGroup.Item disabled key={index}>\r\n        <WordCard\r\n          inactive\r\n          word={word}\r\n          simScores={props.simScores[props.list.indexOf(word)]}\r\n        />\r\n      </ListGroup.Item>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>{content}</div>\r\n      <div>{inactiveContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport InputBar from \"./InputBar\";\r\nimport WordList from \"./WordList\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nconst App = () => {\r\n  const [wordList, setWordList] = useState([\r\n    \"supplementary\",\r\n    \"embarrassment\",\r\n    \"concentration\",\r\n    \"communication\",\r\n    \"strikebreaker\",\r\n    \"entertainment\",\r\n    \"constellation\",\r\n    \"qualification\",\r\n    \"preoccupation\",\r\n    \"consciousness\",\r\n    \"revolutionary\",\r\n    \"contradiction\",\r\n    \"inappropriate\",\r\n  ]);\r\n  const [inactiveWords, setInactiveWords] = useState([]);\r\n  const [simScores, setSimScores] = useState([]);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    reset();\r\n  };\r\n  const handleOpen = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length === 1 && isStarted) {\r\n      handleOpen();\r\n    }\r\n    if (wordList.length === 0 && isStarted) {\r\n      alert(\"There doesn't seem to be a solution to this problem\");\r\n    }\r\n  }, [wordList, isStarted]);\r\n\r\n  const checkForDuplicates = (word) => {\r\n    return !wordList.includes(word);\r\n  };\r\n\r\n  const checkLength = (word) => {\r\n    return wordList[0].length === word.length;\r\n  };\r\n\r\n  const addToList = (word) => {\r\n    if (word.length > 3) {\r\n      if (wordList.length < 1) {\r\n        setWordList([...wordList, word]);\r\n      } else {\r\n        if (checkLength(word) && checkForDuplicates(word)) {\r\n          setWordList([...wordList, word]);\r\n        } else {\r\n          alert(\r\n            checkLength(word)\r\n              ? \"word is already in list\"\r\n              : \"word is not the same length as the others\"\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"your word is too short\");\r\n    }\r\n  };\r\n\r\n  const setupSimMatrix = (list) => {\r\n    let size = list.length;\r\n    let scores = new Array(size);\r\n    for (var i = 0; i < size; i++) {\r\n      scores[i] = new Array(size);\r\n      for (var j = 0; j < size; j++) {\r\n        scores[i][j] = -1;\r\n      }\r\n    }\r\n    return scores;\r\n  };\r\n\r\n  const calcSim = (list) => {\r\n    let scores = setupSimMatrix(list);\r\n    let size = scores.length;\r\n    for (var i = 0; i < size; i++) {\r\n      for (var j = 0; j < size; j++) {\r\n        if (i !== j) {\r\n          scores[i][j] = scores[j][i] = checkSimilarity(list[i], list[j]);\r\n        }\r\n      }\r\n    }\r\n    return scores;\r\n  };\r\n\r\n  const startProgram = (list) => {\r\n    let scores = calcSim(list);\r\n    setSimScores(scores);\r\n    setIsStarted(true);\r\n  };\r\n\r\n  const checkSimilarity = (a, b) => {\r\n    let sim = 0;\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        sim++;\r\n      }\r\n    }\r\n    return sim;\r\n  };\r\n\r\n  const removeWord = (word) => {\r\n    let newlist = wordList.filter((w) => {\r\n      return w !== word;\r\n    });\r\n    setWordList(newlist);\r\n  };\r\n\r\n  const chooseWord = (word, sim) => {\r\n    let idx = wordList.indexOf(word);\r\n    //calculate all words to exclude\r\n    let matches = [];\r\n    //go through the sim scores for that word\r\n    //each score that matches the sim number is added to matches\r\n    simScores[idx].forEach((element, index) => {\r\n      if (element === sim) {\r\n        matches.push(index);\r\n      }\r\n    });\r\n    let keep = wordList.filter((word, index) => {\r\n      return matches.includes(index);\r\n    });\r\n    let chuck = wordList.filter((word) => {\r\n      return !keep.includes(word);\r\n    });\r\n    setWordList(keep);\r\n    setInactiveWords([...inactiveWords, ...chuck]);\r\n    //all matches are removed from wordList\r\n    setSimScores(calcSim(keep));\r\n  };\r\n\r\n  const reset = () => {\r\n    setWordList([]);\r\n    setSimScores([]);\r\n    setInactiveWords([]);\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const Input = () => {\r\n    return !isStarted ? (\r\n      <InputBar\r\n        onSubmit={(word) => addToList(word)}\r\n        handleStart={() => startProgram(wordList)}\r\n        handleReset={() => reset()}\r\n      />\r\n    ) : (\r\n      <div\r\n        className=\"ui animated green button\"\r\n        tabindex=\"0\"\r\n        onClick={() => reset()}\r\n      >\r\n        <div className=\"hidden content\">Reset</div>\r\n        <div className=\"visible content\">\r\n          <i className=\"recycle icon\"></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui raised padded text container segment\">\r\n      <Input className=\"ui container\" />\r\n      <WordList\r\n        list={wordList}\r\n        chooseWord={chooseWord}\r\n        inactiveList={inactiveWords}\r\n        simScores={simScores}\r\n        handleRemove={removeWord}\r\n        isStarted={isStarted}\r\n      />\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header>The answer is:</Modal.Header>\r\n        <Modal.Body>{wordList[0]}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={handleClose}>Reset</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}