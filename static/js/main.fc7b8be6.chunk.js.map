{"version":3,"sources":["components/InputBar.js","components/WordCard.js","components/WordList.js","components/App.js","index.js"],"names":["InputBar","props","useState","word","setWord","onSubmit","event","preventDefault","toLocaleUpperCase","className","placeholder","onChange","e","target","value","onKeyPress","charCode","autoFocus","tabIndex","onClick","handleStart","handleReset","WordCard","inactive","isStarted","handleRemove","displayRemove","key","scores","Set","simScores","sort","map","sim","chooseWord","displaySims","WordList","list","content","index","indexOf","inactiveContent","inactiveList","App","wordList","setWordList","inactiveWords","setInactiveWords","setSimScores","setIsStarted","show","setShow","handleClose","reset","useEffect","length","alert","checkLength","addToList","includes","checkForDuplicates","calcSim","size","Array","i","j","setupSimMatrix","checkSimilarity","a","b","Input","tabindex","startProgram","idx","matches","forEach","element","push","keep","filter","chuck","newlist","w","Modal","onHide","backdrop","keyboard","Header","Body","Footer","Button","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fc7b8be6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst InputBar = (props) => {\r\n  const [word, setWord] = useState(\"\");\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onSubmit(word.toLocaleUpperCase());\r\n    setWord(\"\");\r\n  };\r\n\r\n  const onKeyUp = (event) => {\r\n    if (event.charCode === 13) {\r\n      onSubmit(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui container\">\r\n      <div className=\"ui input\">\r\n        <input\r\n          placeholder=\"Enter a word\"\r\n          onChange={(e) => setWord(e.target.value)}\r\n          onSubmit={() => onSubmit()}\r\n          onKeyPress={(e) => onKeyUp(e)}\r\n          autoFocus\r\n        />\r\n        <div className=\"ui container\">\r\n          <div\r\n            className=\"ui animated primary button\"\r\n            tabIndex=\"0\"\r\n            onClick={onSubmit}\r\n          >\r\n            <div className=\"visible content\">Add</div>\r\n            <div className=\"hidden content\">\r\n              <i className=\"plus circle icon\"></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"ui animated green button\" onClick={props.handleStart}>\r\n            <div className=\"visible content\">Start</div>\r\n            <div className=\"hidden content\">\r\n              <i className=\"play circle icon\"></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"ui animated red button\" onClick={props.handleReset}>\r\n            <div className=\"visible content\">Reset</div>\r\n            <div className=\"hidden content\">\r\n              <i className=\"recycle icon\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputBar;\r\n","import React from \"react\";\r\n\r\nconst WordCard = (props) => {\r\n  const displaySims = () => {\r\n    let key = 0;\r\n    const scores = [...new Set(props.simScores)].sort();\r\n    return props.isStarted ? (\r\n      <div className=\"column\">\r\n        <div className=\"ui center aligned container\">\r\n          {scores.map((sim) => {\r\n            if (sim > -1) {\r\n              return (\r\n                <button\r\n                  className=\"mini ui compact button\"\r\n                  key={key++}\r\n                  onClick={() => props.chooseWord(props.word, sim)}\r\n                >\r\n                  {sim}\r\n                </button>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const displayRemove = (props) => {\r\n    return (\r\n      <div className=\"two wide column\">\r\n        <button\r\n          className=\"compact circular ui icon red button\"\r\n          onClick={() => props.handleRemove(props.word)}\r\n        >\r\n          <i className=\"small trash icon\"></i>\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui segment\">\r\n      <div className=\"ui equal width grid\">\r\n        <div className=\"column\">\r\n          <div className=\"ui center aligned container\">\r\n            {props.inactive ? <s>{props.word}</s> : props.word}\r\n          </div>\r\n        </div>\r\n        {!props.isStarted ? displayRemove(props) : null}\r\n        {!props.inactive ? displaySims() : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordCard;\r\n","import React from \"react\";\r\nimport WordCard from \"./WordCard\";\r\nconst WordList = (props) => {\r\n  if (!props.list) {\r\n    return <div></div>;\r\n  }\r\n\r\n  let content, inactiveContent;\r\n\r\n  content = props.list.map((word, index) => {\r\n    return (\r\n      <WordCard\r\n        index={props.list.indexOf(word)}\r\n        chooseWord={props.chooseWord}\r\n        word={word}\r\n        simScores={props.simScores[index]}\r\n        handleRemove={props.handleRemove}\r\n        isStarted={props.isStarted}\r\n        key={word}\r\n      />\r\n    );\r\n  });\r\n\r\n  inactiveContent = props.inactiveList.map((word, index) => {\r\n    return (\r\n      <WordCard\r\n        key={word}\r\n        inactive\r\n        word={word}\r\n        simScores={props.simScores[props.list.indexOf(word)]}\r\n        isStarted={props.isStarted}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"ui raised padded container segment\">\r\n      <div className=\"ui list\">{content}</div>\r\n      <div className=\"ui list\">{inactiveContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport InputBar from \"./InputBar\";\r\nimport WordList from \"./WordList\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n//TODO: Allow for the quick load of an example\r\n//TODO: Change the color scheme to match fallout colors\r\n\r\nconst App = () => {\r\n  const [wordList, setWordList] = useState([\r\n    // \"supplementary\",\r\n    // \"embarrassment\",\r\n    // \"concentration\",\r\n    // \"communication\",\r\n    // \"strikebreaker\",\r\n    // \"entertainment\",\r\n    // \"constellation\",\r\n    // \"qualification\",\r\n    // \"preoccupation\",\r\n    // \"consciousness\",\r\n    // \"revolutionary\",\r\n    // \"contradiction\",\r\n    // \"inappropriate\",\r\n  ]);\r\n  const [inactiveWords, setInactiveWords] = useState([]);\r\n  const [simScores, setSimScores] = useState([]);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    reset();\r\n  };\r\n  const handleOpen = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length === 1 && isStarted) {\r\n      handleOpen();\r\n    }\r\n    if (wordList.length === 0 && isStarted) {\r\n      alert(\"There doesn't seem to be a solution to this problem\");\r\n    }\r\n  }, [wordList, isStarted]);\r\n\r\n  const checkForDuplicates = (word) => {\r\n    return !wordList.includes(word);\r\n  };\r\n\r\n  const checkLength = (word) => {\r\n    return wordList[0].length === word.length;\r\n  };\r\n\r\n  const addToList = (word) => {\r\n    if (word.length > 3) {\r\n      if (wordList.length < 1) {\r\n        setWordList([...wordList, word]);\r\n      } else {\r\n        if (checkLength(word) && checkForDuplicates(word)) {\r\n          setWordList([...wordList, word]);\r\n        } else {\r\n          alert(\r\n            checkLength(word)\r\n              ? \"word is already in list\"\r\n              : \"word is not the same length as the others\"\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"your word is too short\");\r\n    }\r\n  };\r\n\r\n  const setupSimMatrix = (list) => {\r\n    let size = list.length;\r\n    let scores = new Array(size);\r\n    for (var i = 0; i < size; i++) {\r\n      scores[i] = new Array(size);\r\n      for (var j = 0; j < size; j++) {\r\n        scores[i][j] = -1;\r\n      }\r\n    }\r\n    return scores;\r\n  };\r\n\r\n  const calcSim = (list) => {\r\n    let scores = setupSimMatrix(list);\r\n    let size = scores.length;\r\n    for (var i = 0; i < size; i++) {\r\n      for (var j = 0; j < size; j++) {\r\n        if (i !== j) {\r\n          scores[i][j] = scores[j][i] = checkSimilarity(list[i], list[j]);\r\n        }\r\n      }\r\n    }\r\n    return scores;\r\n  };\r\n\r\n  const startProgram = (list) => {\r\n    let scores = calcSim(list);\r\n    setSimScores(scores);\r\n    setIsStarted(true);\r\n  };\r\n\r\n  const checkSimilarity = (a, b) => {\r\n    let sim = 0;\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        sim++;\r\n      }\r\n    }\r\n    return sim;\r\n  };\r\n\r\n  const removeWord = (word) => {\r\n    let newlist = wordList.filter((w) => {\r\n      return w !== word;\r\n    });\r\n    setWordList(newlist);\r\n  };\r\n\r\n  const chooseWord = (word, sim) => {\r\n    let idx = wordList.indexOf(word);\r\n    //calculate all words to exclude\r\n    let matches = [];\r\n    //go through the sim scores for that word\r\n    //each score that matches the sim number is added to matches\r\n    simScores[idx].forEach((element, index) => {\r\n      if (element === sim) {\r\n        matches.push(index);\r\n      }\r\n    });\r\n    let keep = wordList.filter((word, index) => {\r\n      return matches.includes(index);\r\n    });\r\n    let chuck = wordList.filter((word) => {\r\n      return !keep.includes(word);\r\n    });\r\n    setWordList(keep);\r\n    setInactiveWords([...inactiveWords, ...chuck]);\r\n    //all matches are removed from wordList\r\n    setSimScores(calcSim(keep));\r\n  };\r\n\r\n  const reset = () => {\r\n    setWordList([]);\r\n    setSimScores([]);\r\n    setInactiveWords([]);\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const Input = () => {\r\n    return !isStarted ? (\r\n      <InputBar\r\n        onSubmit={(word) => addToList(word)}\r\n        handleStart={() => startProgram(wordList)}\r\n        handleReset={() => reset()}\r\n      />\r\n    ) : (\r\n      <div\r\n        className=\"ui animated green button\"\r\n        tabindex=\"0\"\r\n        onClick={() => reset()}\r\n      >\r\n        <div className=\"hidden content\">Reset</div>\r\n        <div className=\"visible content\">\r\n          <i className=\"recycle icon\"></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui raised padded text container segment\">\r\n      <Input className=\"ui container\" />\r\n      <WordList\r\n        list={wordList}\r\n        chooseWord={chooseWord}\r\n        inactiveList={inactiveWords}\r\n        simScores={simScores}\r\n        handleRemove={removeWord}\r\n        isStarted={isStarted}\r\n      />\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header>The answer is:</Modal.Header>\r\n        <Modal.Body>{wordList[0]}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={handleClose}>Reset</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}